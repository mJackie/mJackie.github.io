<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jackie Liu&#39;s Blog</title>
  <subtitle>Just so so</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mjackie.github.io/"/>
  <updated>2016-11-23T15:35:23.972Z</updated>
  <id>http://mjackie.github.io/</id>
  
  <author>
    <name>Jackie Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ddd</title>
    <link href="http://mjackie.github.io/uncategorized/civv5kaep000jpsu0hwhr8bif/"/>
    <id>http://mjackie.github.io/uncategorized/civv5kaep000jpsu0hwhr8bif/</id>
    <published>2016-11-23T15:35:23.000Z</published>
    <updated>2016-11-23T15:35:23.972Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cccc</title>
    <link href="http://mjackie.github.io/uncategorized/civv5kaei000cpsu0me0y0cri/"/>
    <id>http://mjackie.github.io/uncategorized/civv5kaei000cpsu0me0y0cri/</id>
    <published>2016-11-23T15:35:19.000Z</published>
    <updated>2016-11-23T15:35:19.418Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bbbb</title>
    <link href="http://mjackie.github.io/uncategorized/civv5kaee000apsu0zwg9zpxq/"/>
    <id>http://mjackie.github.io/uncategorized/civv5kaee000apsu0zwg9zpxq/</id>
    <published>2016-11-23T15:35:14.000Z</published>
    <updated>2016-11-23T15:35:14.403Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>aaa</title>
    <link href="http://mjackie.github.io/uncategorized/civv5kae90007psu0i7i69l1k/"/>
    <id>http://mjackie.github.io/uncategorized/civv5kae90007psu0i7i69l1k/</id>
    <published>2016-11-23T15:35:03.000Z</published>
    <updated>2016-11-23T15:35:03.883Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHPSession实现用户登陆功能</title>
    <link href="http://mjackie.github.io/Tech/civv5kado0001psu0y1alss7e/"/>
    <id>http://mjackie.github.io/Tech/civv5kado0001psu0y1alss7e/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:21:32.771Z</updated>
    
    <content type="html"><![CDATA[<p>Session 是存储在服务器端的会话，相对安全，并且不像 Cookie 那样有存储长度限制.由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。实际上在服务器端的 Session 文件，PHP 自动修改 Session 文件的权限，只保留了系统读和写权限，而且不能通过 ftp 修改，所以安全得多。</p>
<p>login.php</p>
<pre><code>&lt;?php
//  表单提交后...
$posts = $_POST;
//  清除一些空白符号
foreach ($posts as $key =&gt; $value) {
    $posts[$key] = trim($value);
}
$password = md5($posts[&quot;password&quot;]);
$username = $posts[&quot;username&quot;]; 

$query = &quot;SELECT `username` FROM `user` WHERE `password` = &apos;$password&apos; AND `username` = &apos;$username&apos;&quot;;
//  取得查询结果
$userInfo = $DB-&gt;getRow($query); 

if (!empty($userInfo)) {
    //  当验证通过后，启动 Session
    session_start();
    //  注册登陆成功的 admin 变量，并赋值 true
    $_SESSION[&quot;admin&quot;] = true;
} else {
    die(&quot;用户名密码错误&quot;);
}
?&gt;
</code></pre><a id="more"></a>
<p>check.php</p>
<pre><code>&lt;?php
//  防止全局变量造成安全隐患
$admin = false;
//  启动会话，这步必不可少
session_start();
//  判断是否登陆
if (isset($_SESSION[&quot;admin&quot;]) &amp;&amp; $_SESSION[&quot;admin&quot;] === true) {
    echo &quot;您已经成功登陆&quot;;
} else {
    //  验证失败，将 $_SESSION[&quot;admin&quot;] 置为 false
    $_SESSION[&quot;admin&quot;] = false;
    die(&quot;您无权访问&quot;);
}
?&gt;
</code></pre><p>exit.php</p>
<pre><code>&lt;?php
session_start();
//  这种方法是将原来注册的某个变量销毁
unset($_SESSION[&apos;admin&apos;]);
//  这种方法是销毁整个 Session 文件
session_destroy();
?&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Session 是存储在服务器端的会话，相对安全，并且不像 Cookie 那样有存储长度限制.由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。实际上在服务器端的 Session 文件，PHP 自动修改 Session 文件的权限，只保留了系统读和写权限，而且不能通过 ftp 修改，所以安全得多。&lt;/p&gt;
&lt;p&gt;login.php&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//  表单提交后...
$posts = $_POST;
//  清除一些空白符号
foreach ($posts as $key =&amp;gt; $value) {
    $posts[$key] = trim($value);
}
$password = md5($posts[&amp;quot;password&amp;quot;]);
$username = $posts[&amp;quot;username&amp;quot;]; 

$query = &amp;quot;SELECT `username` FROM `user` WHERE `password` = &amp;apos;$password&amp;apos; AND `username` = &amp;apos;$username&amp;apos;&amp;quot;;
//  取得查询结果
$userInfo = $DB-&amp;gt;getRow($query); 

if (!empty($userInfo)) {
    //  当验证通过后，启动 Session
    session_start();
    //  注册登陆成功的 admin 变量，并赋值 true
    $_SESSION[&amp;quot;admin&amp;quot;] = true;
} else {
    die(&amp;quot;用户名密码错误&amp;quot;);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Tech" scheme="http://mjackie.github.io/categories/Tech/"/>
    
    
      <category term="php" scheme="http://mjackie.github.io/tags/php/"/>
    
      <category term="session" scheme="http://mjackie.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>PHPSession实现用户登陆功能</title>
    <link href="http://mjackie.github.io/Tech/civv5kae10005psu0mblh2tt1/"/>
    <id>http://mjackie.github.io/Tech/civv5kae10005psu0mblh2tt1/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:21:32.771Z</updated>
    
    <content type="html"><![CDATA[<p>Session 是存储在服务器端的会话，相对安全，并且不像 Cookie 那样有存储长度限制.由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。实际上在服务器端的 Session 文件，PHP 自动修改 Session 文件的权限，只保留了系统读和写权限，而且不能通过 ftp 修改，所以安全得多。</p>
<p>login.php</p>
<pre><code>&lt;?php
//  表单提交后...
$posts = $_POST;
//  清除一些空白符号
foreach ($posts as $key =&gt; $value) {
    $posts[$key] = trim($value);
}
$password = md5($posts[&quot;password&quot;]);
$username = $posts[&quot;username&quot;]; 

$query = &quot;SELECT `username` FROM `user` WHERE `password` = &apos;$password&apos; AND `username` = &apos;$username&apos;&quot;;
//  取得查询结果
$userInfo = $DB-&gt;getRow($query); 

if (!empty($userInfo)) {
    //  当验证通过后，启动 Session
    session_start();
    //  注册登陆成功的 admin 变量，并赋值 true
    $_SESSION[&quot;admin&quot;] = true;
} else {
    die(&quot;用户名密码错误&quot;);
}
?&gt;
</code></pre><a id="more"></a>
<p>check.php</p>
<pre><code>&lt;?php
//  防止全局变量造成安全隐患
$admin = false;
//  启动会话，这步必不可少
session_start();
//  判断是否登陆
if (isset($_SESSION[&quot;admin&quot;]) &amp;&amp; $_SESSION[&quot;admin&quot;] === true) {
    echo &quot;您已经成功登陆&quot;;
} else {
    //  验证失败，将 $_SESSION[&quot;admin&quot;] 置为 false
    $_SESSION[&quot;admin&quot;] = false;
    die(&quot;您无权访问&quot;);
}
?&gt;
</code></pre><p>exit.php</p>
<pre><code>&lt;?php
session_start();
//  这种方法是将原来注册的某个变量销毁
unset($_SESSION[&apos;admin&apos;]);
//  这种方法是销毁整个 Session 文件
session_destroy();
?&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Session 是存储在服务器端的会话，相对安全，并且不像 Cookie 那样有存储长度限制.由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。实际上在服务器端的 Session 文件，PHP 自动修改 Session 文件的权限，只保留了系统读和写权限，而且不能通过 ftp 修改，所以安全得多。&lt;/p&gt;
&lt;p&gt;login.php&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//  表单提交后...
$posts = $_POST;
//  清除一些空白符号
foreach ($posts as $key =&amp;gt; $value) {
    $posts[$key] = trim($value);
}
$password = md5($posts[&amp;quot;password&amp;quot;]);
$username = $posts[&amp;quot;username&amp;quot;]; 

$query = &amp;quot;SELECT `username` FROM `user` WHERE `password` = &amp;apos;$password&amp;apos; AND `username` = &amp;apos;$username&amp;apos;&amp;quot;;
//  取得查询结果
$userInfo = $DB-&amp;gt;getRow($query); 

if (!empty($userInfo)) {
    //  当验证通过后，启动 Session
    session_start();
    //  注册登陆成功的 admin 变量，并赋值 true
    $_SESSION[&amp;quot;admin&amp;quot;] = true;
} else {
    die(&amp;quot;用户名密码错误&amp;quot;);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Tech" scheme="http://mjackie.github.io/categories/Tech/"/>
    
    
      <category term="php" scheme="http://mjackie.github.io/tags/php/"/>
    
      <category term="session" scheme="http://mjackie.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>PHPSession实现用户登陆功能</title>
    <link href="http://mjackie.github.io/Tech/civv5kae80006psu07cnps9bi/"/>
    <id>http://mjackie.github.io/Tech/civv5kae80006psu07cnps9bi/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:21:32.771Z</updated>
    
    <content type="html"><![CDATA[<p>Session 是存储在服务器端的会话，相对安全，并且不像 Cookie 那样有存储长度限制.由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。实际上在服务器端的 Session 文件，PHP 自动修改 Session 文件的权限，只保留了系统读和写权限，而且不能通过 ftp 修改，所以安全得多。</p>
<p>login.php</p>
<pre><code>&lt;?php
//  表单提交后...
$posts = $_POST;
//  清除一些空白符号
foreach ($posts as $key =&gt; $value) {
    $posts[$key] = trim($value);
}
$password = md5($posts[&quot;password&quot;]);
$username = $posts[&quot;username&quot;]; 

$query = &quot;SELECT `username` FROM `user` WHERE `password` = &apos;$password&apos; AND `username` = &apos;$username&apos;&quot;;
//  取得查询结果
$userInfo = $DB-&gt;getRow($query); 

if (!empty($userInfo)) {
    //  当验证通过后，启动 Session
    session_start();
    //  注册登陆成功的 admin 变量，并赋值 true
    $_SESSION[&quot;admin&quot;] = true;
} else {
    die(&quot;用户名密码错误&quot;);
}
?&gt;
</code></pre><a id="more"></a>
<p>check.php</p>
<pre><code>&lt;?php
//  防止全局变量造成安全隐患
$admin = false;
//  启动会话，这步必不可少
session_start();
//  判断是否登陆
if (isset($_SESSION[&quot;admin&quot;]) &amp;&amp; $_SESSION[&quot;admin&quot;] === true) {
    echo &quot;您已经成功登陆&quot;;
} else {
    //  验证失败，将 $_SESSION[&quot;admin&quot;] 置为 false
    $_SESSION[&quot;admin&quot;] = false;
    die(&quot;您无权访问&quot;);
}
?&gt;
</code></pre><p>exit.php</p>
<pre><code>&lt;?php
session_start();
//  这种方法是将原来注册的某个变量销毁
unset($_SESSION[&apos;admin&apos;]);
//  这种方法是销毁整个 Session 文件
session_destroy();
?&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Session 是存储在服务器端的会话，相对安全，并且不像 Cookie 那样有存储长度限制.由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。实际上在服务器端的 Session 文件，PHP 自动修改 Session 文件的权限，只保留了系统读和写权限，而且不能通过 ftp 修改，所以安全得多。&lt;/p&gt;
&lt;p&gt;login.php&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//  表单提交后...
$posts = $_POST;
//  清除一些空白符号
foreach ($posts as $key =&amp;gt; $value) {
    $posts[$key] = trim($value);
}
$password = md5($posts[&amp;quot;password&amp;quot;]);
$username = $posts[&amp;quot;username&amp;quot;]; 

$query = &amp;quot;SELECT `username` FROM `user` WHERE `password` = &amp;apos;$password&amp;apos; AND `username` = &amp;apos;$username&amp;apos;&amp;quot;;
//  取得查询结果
$userInfo = $DB-&amp;gt;getRow($query); 

if (!empty($userInfo)) {
    //  当验证通过后，启动 Session
    session_start();
    //  注册登陆成功的 admin 变量，并赋值 true
    $_SESSION[&amp;quot;admin&amp;quot;] = true;
} else {
    die(&amp;quot;用户名密码错误&amp;quot;);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Tech" scheme="http://mjackie.github.io/categories/Tech/"/>
    
    
      <category term="php" scheme="http://mjackie.github.io/tags/php/"/>
    
      <category term="session" scheme="http://mjackie.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mjackie.github.io/code/civv5kaen000gpsu0mbw4zt8m/"/>
    <id>http://mjackie.github.io/code/civv5kaen000gpsu0mbw4zt8m/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:20:20.451Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="code" scheme="http://mjackie.github.io/categories/code/"/>
    
    
  </entry>
  
  <entry>
    <title>PHPSession实现用户登陆功能</title>
    <link href="http://mjackie.github.io/Tech/civv5kadt0002psu01cuwk9kc/"/>
    <id>http://mjackie.github.io/Tech/civv5kadt0002psu01cuwk9kc/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:21:32.771Z</updated>
    
    <content type="html"><![CDATA[<p>Session 是存储在服务器端的会话，相对安全，并且不像 Cookie 那样有存储长度限制.由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。实际上在服务器端的 Session 文件，PHP 自动修改 Session 文件的权限，只保留了系统读和写权限，而且不能通过 ftp 修改，所以安全得多。</p>
<p>login.php</p>
<pre><code>&lt;?php
//  表单提交后...
$posts = $_POST;
//  清除一些空白符号
foreach ($posts as $key =&gt; $value) {
    $posts[$key] = trim($value);
}
$password = md5($posts[&quot;password&quot;]);
$username = $posts[&quot;username&quot;]; 

$query = &quot;SELECT `username` FROM `user` WHERE `password` = &apos;$password&apos; AND `username` = &apos;$username&apos;&quot;;
//  取得查询结果
$userInfo = $DB-&gt;getRow($query); 

if (!empty($userInfo)) {
    //  当验证通过后，启动 Session
    session_start();
    //  注册登陆成功的 admin 变量，并赋值 true
    $_SESSION[&quot;admin&quot;] = true;
} else {
    die(&quot;用户名密码错误&quot;);
}
?&gt;
</code></pre><a id="more"></a>
<p>check.php</p>
<pre><code>&lt;?php
//  防止全局变量造成安全隐患
$admin = false;
//  启动会话，这步必不可少
session_start();
//  判断是否登陆
if (isset($_SESSION[&quot;admin&quot;]) &amp;&amp; $_SESSION[&quot;admin&quot;] === true) {
    echo &quot;您已经成功登陆&quot;;
} else {
    //  验证失败，将 $_SESSION[&quot;admin&quot;] 置为 false
    $_SESSION[&quot;admin&quot;] = false;
    die(&quot;您无权访问&quot;);
}
?&gt;
</code></pre><p>exit.php</p>
<pre><code>&lt;?php
session_start();
//  这种方法是将原来注册的某个变量销毁
unset($_SESSION[&apos;admin&apos;]);
//  这种方法是销毁整个 Session 文件
session_destroy();
?&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Session 是存储在服务器端的会话，相对安全，并且不像 Cookie 那样有存储长度限制.由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。实际上在服务器端的 Session 文件，PHP 自动修改 Session 文件的权限，只保留了系统读和写权限，而且不能通过 ftp 修改，所以安全得多。&lt;/p&gt;
&lt;p&gt;login.php&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
//  表单提交后...
$posts = $_POST;
//  清除一些空白符号
foreach ($posts as $key =&amp;gt; $value) {
    $posts[$key] = trim($value);
}
$password = md5($posts[&amp;quot;password&amp;quot;]);
$username = $posts[&amp;quot;username&amp;quot;]; 

$query = &amp;quot;SELECT `username` FROM `user` WHERE `password` = &amp;apos;$password&amp;apos; AND `username` = &amp;apos;$username&amp;apos;&amp;quot;;
//  取得查询结果
$userInfo = $DB-&amp;gt;getRow($query); 

if (!empty($userInfo)) {
    //  当验证通过后，启动 Session
    session_start();
    //  注册登陆成功的 admin 变量，并赋值 true
    $_SESSION[&amp;quot;admin&amp;quot;] = true;
} else {
    die(&amp;quot;用户名密码错误&amp;quot;);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Tech" scheme="http://mjackie.github.io/categories/Tech/"/>
    
    
      <category term="php" scheme="http://mjackie.github.io/tags/php/"/>
    
      <category term="session" scheme="http://mjackie.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mjackie.github.io/code/civv5kaev000npsu095u7zy3p/"/>
    <id>http://mjackie.github.io/code/civv5kaev000npsu095u7zy3p/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:20:20.451Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="code" scheme="http://mjackie.github.io/categories/code/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mjackie.github.io/code/civv5kaez000ppsu0exa71wnr/"/>
    <id>http://mjackie.github.io/code/civv5kaez000ppsu0exa71wnr/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:20:20.451Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="code" scheme="http://mjackie.github.io/categories/code/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mjackie.github.io/code/civv5kaf3000rpsu0oz7p34xg/"/>
    <id>http://mjackie.github.io/code/civv5kaf3000rpsu0oz7p34xg/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:20:20.451Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="code" scheme="http://mjackie.github.io/categories/code/"/>
    
    
  </entry>
  
  <entry>
    <title>词法分析器</title>
    <link href="http://mjackie.github.io/code/civv5kaf6000upsu0z17rs269/"/>
    <id>http://mjackie.github.io/code/civv5kaf6000upsu0z17rs269/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:21:04.123Z</updated>
    
    <content type="html"><![CDATA[<p>编译原理实验课写的词法分析器，加深了对编程语言的理解，将课本上的伪代码实现完善了一遍，纯手打。</p>
<pre><code>/* 编译原理实验-词法分析器
 * 刘嘉琦-20160325
 * 1、PL/0语言的单词结构
//关键字(10个)：begin, end ,if ,then, while, do, const, var,call,procedure
//标识符：字母序列，最大长度10
//常数：整型常数
//算符和界符（17个）：+， -， *，/，odd，=，&lt;&gt;，&lt;，&gt;，&lt;=，&gt;=，:=，(，) ，, ，.，;
//2、单词的种别划分
//    标识符 作为一种
//    常数 作为一种
//    算符和界符每个单词作为一个单独种别
//3、PL/0的语言的词法分析器将要完成以下工作：
//（1）    跳过分隔符（如空格，回车，制表符）；
//（2）    识别诸如begin，end，if，while等保留字；
//（3）    识别非保留字的一般标识符。
//（4）    识别数字序列。
//（5）    识别:=，&lt;=，&gt;=之类的特殊符号。
//4、词法分析器的实现方式：
//    把词法分析器设计成一个独立子程序，以便于语法分析器调用。词法分析器运行一次产生一个单词符号。
//5、词法分析器的输出形式
//   （种别，属性值）
//其中：种别在“2、单词的种别”中进行了定义；
//      属性值：若单词种别只代表唯一单词，属性值为空；
//              若单词种别是SYM_IDENTIFIER，属性值为该单词在标识符表中的位置；
//              若单词种别是SYM_ NUMBER，属性值为该单词在常数表中的位置。
**/
</code></pre><a id="more"></a>
<pre><code>package foc;

import java.util.Scanner;

public class cffxq {
    char ch;
    StringBuffer strToken;
    static int flag_getchar = 0; //搜索指示器
    String str;   //字符串
    String[] gjz = {&quot;odd&quot;,&quot;begin&quot;, &quot;end&quot; ,&quot;if&quot; ,&quot;then&quot;, &quot;while&quot;, &quot;do&quot;, &quot;const&quot;, &quot;var&quot;,&quot;call&quot;,&quot;procedure&quot;};
    String[][] chart_id = new String[100][2];
    int flag_id = 0; //标识符指针
    String[] chart_const = new String[100];
    int flag_const = 0; //常数指针

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        StringBuffer stb = new StringBuffer(sc.nextLine());
        stb.append(&quot; &quot;);
        String str = stb.toString();
        cffxq c = new cffxq();
        while(flag_getchar&lt;str.length()-1){
            c.begin(str);
        }

    }

    private void GetChar(){
        ch = str.charAt(flag_getchar);
        flag_getchar++;
    } 

    public void begin(String str) {
        this.str = str;

        int code,value;
        strToken = new StringBuffer(&quot;&quot;);
        GetChar();
        GetBC();
        if(IsLetter()){
            while(IsLetter()||IsDigit()){
                Concat();
                GetChar();
            }
            Retract();
            code = Reserve();
            if(code &lt; 0){
                value = InsertId(strToken.toString());
                System.out.println(&quot;($ID,&quot; + value +&quot;)&quot;);
                return;
            }
            else if(code == 0){
                System.out.println(&quot;(算符或界符,&quot; + &quot;odd&quot;+&quot;)&quot;); 
                return;
            }
            else{
                System.out.println(&quot;($&quot;+gjz[code]+&quot;,-)&quot; ); 
                return;
            }
        }

        else if(IsDigit()){
            while(IsDigit()){
                Concat();
                GetChar();
            }
            Retract();
            value = InsertConst(strToken.toString());
            System.out.println(&quot;($INT,&quot; + value +&quot;)&quot;);
            return;
        }

        else if(ch == &apos;+&apos;){
            System.out.println(&quot;($+,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;-&apos;){
            System.out.println(&quot;($-,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;*&apos;){
            System.out.println(&quot;($*,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;/&apos;){
            System.out.println(&quot;($/,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;=&apos;){
            System.out.println(&quot;($=,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;,&apos;){
            System.out.println(&quot;($,,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;.&apos;){
            System.out.println(&quot;($.,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;(&apos;){
            System.out.println(&quot;($(,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;)&apos;){
            System.out.println(&quot;($),&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;;&apos;){
            System.out.println(&quot;($;,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;:&apos;){
            GetChar();
            if(ch == &apos;=&apos;){
                System.out.println(&quot;($:=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($:,&quot; + &quot;-)&quot;);
        }
        else if(ch == &apos;&gt;&apos;){
            GetChar();
            if(ch == &apos;=&apos;){
                System.out.println(&quot;($&gt;=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($&gt;,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;&lt;&apos;){
            GetChar();
            if(ch == &apos;&gt;&apos;){
                System.out.println(&quot;($&lt;&gt;,&quot; + &quot;-)&quot;);
                return;
            }
            else if(ch == &apos;=&apos;){
                System.out.println(&quot;($&lt;=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($&lt;,&quot; + &quot;-)&quot;);
            return;
        }

    }

    private void GetBC(){
        if(ch==&apos; &apos;){
            GetChar();
            GetBC();
        }
    }

    private void Concat(){
        strToken.append(ch);
    }

    private boolean IsLetter(){
        if(Character.isLetter(ch))
            return true;
        else
            return false;
    } 

    private boolean IsDigit(){
        if(Character.isDigit(ch))
            return true;
        else
            return false;
    } 

    private int Reserve(){
        for(int i=0;i&lt;gjz.length; i++){
            if(gjz[i].equals(strToken.toString()))
                return i;
        }
        return -1;   //返回数组索引，否则返回-1
    }

    private void Retract(){
        flag_getchar--;
        ch = &apos; &apos;;
    }

    private int InsertId(String strToken){
        for(int i=0;i&lt;flag_id;i++){
            if(chart_id[i][0].equals(strToken))
                return i;
        }
        chart_id[flag_id][0] = strToken;
        flag_id++;
        return flag_id-1;
    }

    private int InsertConst(String strToken){
        for(int i=0;i&lt;flag_const;i++){
            if(chart_const[i].equals(strToken))
                return i;
        }
        chart_const[flag_const] = strToken;
        flag_const++;
        return flag_const-1;
    }
    private void ProcError(){
        System.out.println(&quot;词法错误！&quot;);
    }

}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编译原理实验课写的词法分析器，加深了对编程语言的理解，将课本上的伪代码实现完善了一遍，纯手打。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* 编译原理实验-词法分析器
 * 刘嘉琦-20160325
 * 1、PL/0语言的单词结构
//关键字(10个)：begin, end ,if ,then, while, do, const, var,call,procedure
//标识符：字母序列，最大长度10
//常数：整型常数
//算符和界符（17个）：+， -， *，/，odd，=，&amp;lt;&amp;gt;，&amp;lt;，&amp;gt;，&amp;lt;=，&amp;gt;=，:=，(，) ，, ，.，;
//2、单词的种别划分
//    标识符 作为一种
//    常数 作为一种
//    算符和界符每个单词作为一个单独种别
//3、PL/0的语言的词法分析器将要完成以下工作：
//（1）    跳过分隔符（如空格，回车，制表符）；
//（2）    识别诸如begin，end，if，while等保留字；
//（3）    识别非保留字的一般标识符。
//（4）    识别数字序列。
//（5）    识别:=，&amp;lt;=，&amp;gt;=之类的特殊符号。
//4、词法分析器的实现方式：
//    把词法分析器设计成一个独立子程序，以便于语法分析器调用。词法分析器运行一次产生一个单词符号。
//5、词法分析器的输出形式
//   （种别，属性值）
//其中：种别在“2、单词的种别”中进行了定义；
//      属性值：若单词种别只代表唯一单词，属性值为空；
//              若单词种别是SYM_IDENTIFIER，属性值为该单词在标识符表中的位置；
//              若单词种别是SYM_ NUMBER，属性值为该单词在常数表中的位置。
**/
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="code" scheme="http://mjackie.github.io/categories/code/"/>
    
    
      <category term="java" scheme="http://mjackie.github.io/tags/java/"/>
    
      <category term="编译原理" scheme="http://mjackie.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>词法分析器</title>
    <link href="http://mjackie.github.io/code/civv5kafe000ypsu0kgvtl5uq/"/>
    <id>http://mjackie.github.io/code/civv5kafe000ypsu0kgvtl5uq/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:21:04.123Z</updated>
    
    <content type="html"><![CDATA[<p>编译原理实验课写的词法分析器，加深了对编程语言的理解，将课本上的伪代码实现完善了一遍，纯手打。</p>
<pre><code>/* 编译原理实验-词法分析器
 * 刘嘉琦-20160325
 * 1、PL/0语言的单词结构
//关键字(10个)：begin, end ,if ,then, while, do, const, var,call,procedure
//标识符：字母序列，最大长度10
//常数：整型常数
//算符和界符（17个）：+， -， *，/，odd，=，&lt;&gt;，&lt;，&gt;，&lt;=，&gt;=，:=，(，) ，, ，.，;
//2、单词的种别划分
//    标识符 作为一种
//    常数 作为一种
//    算符和界符每个单词作为一个单独种别
//3、PL/0的语言的词法分析器将要完成以下工作：
//（1）    跳过分隔符（如空格，回车，制表符）；
//（2）    识别诸如begin，end，if，while等保留字；
//（3）    识别非保留字的一般标识符。
//（4）    识别数字序列。
//（5）    识别:=，&lt;=，&gt;=之类的特殊符号。
//4、词法分析器的实现方式：
//    把词法分析器设计成一个独立子程序，以便于语法分析器调用。词法分析器运行一次产生一个单词符号。
//5、词法分析器的输出形式
//   （种别，属性值）
//其中：种别在“2、单词的种别”中进行了定义；
//      属性值：若单词种别只代表唯一单词，属性值为空；
//              若单词种别是SYM_IDENTIFIER，属性值为该单词在标识符表中的位置；
//              若单词种别是SYM_ NUMBER，属性值为该单词在常数表中的位置。
**/
</code></pre><a id="more"></a>
<pre><code>package foc;

import java.util.Scanner;

public class cffxq {
    char ch;
    StringBuffer strToken;
    static int flag_getchar = 0; //搜索指示器
    String str;   //字符串
    String[] gjz = {&quot;odd&quot;,&quot;begin&quot;, &quot;end&quot; ,&quot;if&quot; ,&quot;then&quot;, &quot;while&quot;, &quot;do&quot;, &quot;const&quot;, &quot;var&quot;,&quot;call&quot;,&quot;procedure&quot;};
    String[][] chart_id = new String[100][2];
    int flag_id = 0; //标识符指针
    String[] chart_const = new String[100];
    int flag_const = 0; //常数指针

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        StringBuffer stb = new StringBuffer(sc.nextLine());
        stb.append(&quot; &quot;);
        String str = stb.toString();
        cffxq c = new cffxq();
        while(flag_getchar&lt;str.length()-1){
            c.begin(str);
        }

    }

    private void GetChar(){
        ch = str.charAt(flag_getchar);
        flag_getchar++;
    } 

    public void begin(String str) {
        this.str = str;

        int code,value;
        strToken = new StringBuffer(&quot;&quot;);
        GetChar();
        GetBC();
        if(IsLetter()){
            while(IsLetter()||IsDigit()){
                Concat();
                GetChar();
            }
            Retract();
            code = Reserve();
            if(code &lt; 0){
                value = InsertId(strToken.toString());
                System.out.println(&quot;($ID,&quot; + value +&quot;)&quot;);
                return;
            }
            else if(code == 0){
                System.out.println(&quot;(算符或界符,&quot; + &quot;odd&quot;+&quot;)&quot;); 
                return;
            }
            else{
                System.out.println(&quot;($&quot;+gjz[code]+&quot;,-)&quot; ); 
                return;
            }
        }

        else if(IsDigit()){
            while(IsDigit()){
                Concat();
                GetChar();
            }
            Retract();
            value = InsertConst(strToken.toString());
            System.out.println(&quot;($INT,&quot; + value +&quot;)&quot;);
            return;
        }

        else if(ch == &apos;+&apos;){
            System.out.println(&quot;($+,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;-&apos;){
            System.out.println(&quot;($-,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;*&apos;){
            System.out.println(&quot;($*,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;/&apos;){
            System.out.println(&quot;($/,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;=&apos;){
            System.out.println(&quot;($=,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;,&apos;){
            System.out.println(&quot;($,,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;.&apos;){
            System.out.println(&quot;($.,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;(&apos;){
            System.out.println(&quot;($(,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;)&apos;){
            System.out.println(&quot;($),&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;;&apos;){
            System.out.println(&quot;($;,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;:&apos;){
            GetChar();
            if(ch == &apos;=&apos;){
                System.out.println(&quot;($:=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($:,&quot; + &quot;-)&quot;);
        }
        else if(ch == &apos;&gt;&apos;){
            GetChar();
            if(ch == &apos;=&apos;){
                System.out.println(&quot;($&gt;=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($&gt;,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;&lt;&apos;){
            GetChar();
            if(ch == &apos;&gt;&apos;){
                System.out.println(&quot;($&lt;&gt;,&quot; + &quot;-)&quot;);
                return;
            }
            else if(ch == &apos;=&apos;){
                System.out.println(&quot;($&lt;=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($&lt;,&quot; + &quot;-)&quot;);
            return;
        }

    }

    private void GetBC(){
        if(ch==&apos; &apos;){
            GetChar();
            GetBC();
        }
    }

    private void Concat(){
        strToken.append(ch);
    }

    private boolean IsLetter(){
        if(Character.isLetter(ch))
            return true;
        else
            return false;
    } 

    private boolean IsDigit(){
        if(Character.isDigit(ch))
            return true;
        else
            return false;
    } 

    private int Reserve(){
        for(int i=0;i&lt;gjz.length; i++){
            if(gjz[i].equals(strToken.toString()))
                return i;
        }
        return -1;   //返回数组索引，否则返回-1
    }

    private void Retract(){
        flag_getchar--;
        ch = &apos; &apos;;
    }

    private int InsertId(String strToken){
        for(int i=0;i&lt;flag_id;i++){
            if(chart_id[i][0].equals(strToken))
                return i;
        }
        chart_id[flag_id][0] = strToken;
        flag_id++;
        return flag_id-1;
    }

    private int InsertConst(String strToken){
        for(int i=0;i&lt;flag_const;i++){
            if(chart_const[i].equals(strToken))
                return i;
        }
        chart_const[flag_const] = strToken;
        flag_const++;
        return flag_const-1;
    }
    private void ProcError(){
        System.out.println(&quot;词法错误！&quot;);
    }

}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编译原理实验课写的词法分析器，加深了对编程语言的理解，将课本上的伪代码实现完善了一遍，纯手打。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* 编译原理实验-词法分析器
 * 刘嘉琦-20160325
 * 1、PL/0语言的单词结构
//关键字(10个)：begin, end ,if ,then, while, do, const, var,call,procedure
//标识符：字母序列，最大长度10
//常数：整型常数
//算符和界符（17个）：+， -， *，/，odd，=，&amp;lt;&amp;gt;，&amp;lt;，&amp;gt;，&amp;lt;=，&amp;gt;=，:=，(，) ，, ，.，;
//2、单词的种别划分
//    标识符 作为一种
//    常数 作为一种
//    算符和界符每个单词作为一个单独种别
//3、PL/0的语言的词法分析器将要完成以下工作：
//（1）    跳过分隔符（如空格，回车，制表符）；
//（2）    识别诸如begin，end，if，while等保留字；
//（3）    识别非保留字的一般标识符。
//（4）    识别数字序列。
//（5）    识别:=，&amp;lt;=，&amp;gt;=之类的特殊符号。
//4、词法分析器的实现方式：
//    把词法分析器设计成一个独立子程序，以便于语法分析器调用。词法分析器运行一次产生一个单词符号。
//5、词法分析器的输出形式
//   （种别，属性值）
//其中：种别在“2、单词的种别”中进行了定义；
//      属性值：若单词种别只代表唯一单词，属性值为空；
//              若单词种别是SYM_IDENTIFIER，属性值为该单词在标识符表中的位置；
//              若单词种别是SYM_ NUMBER，属性值为该单词在常数表中的位置。
**/
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="code" scheme="http://mjackie.github.io/categories/code/"/>
    
    
      <category term="java" scheme="http://mjackie.github.io/tags/java/"/>
    
      <category term="编译原理" scheme="http://mjackie.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>词法分析器</title>
    <link href="http://mjackie.github.io/code/civv5kafk0010psu0icgsi4xl/"/>
    <id>http://mjackie.github.io/code/civv5kafk0010psu0icgsi4xl/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:21:04.123Z</updated>
    
    <content type="html"><![CDATA[<p>编译原理实验课写的词法分析器，加深了对编程语言的理解，将课本上的伪代码实现完善了一遍，纯手打。</p>
<pre><code>/* 编译原理实验-词法分析器
 * 刘嘉琦-20160325
 * 1、PL/0语言的单词结构
//关键字(10个)：begin, end ,if ,then, while, do, const, var,call,procedure
//标识符：字母序列，最大长度10
//常数：整型常数
//算符和界符（17个）：+， -， *，/，odd，=，&lt;&gt;，&lt;，&gt;，&lt;=，&gt;=，:=，(，) ，, ，.，;
//2、单词的种别划分
//    标识符 作为一种
//    常数 作为一种
//    算符和界符每个单词作为一个单独种别
//3、PL/0的语言的词法分析器将要完成以下工作：
//（1）    跳过分隔符（如空格，回车，制表符）；
//（2）    识别诸如begin，end，if，while等保留字；
//（3）    识别非保留字的一般标识符。
//（4）    识别数字序列。
//（5）    识别:=，&lt;=，&gt;=之类的特殊符号。
//4、词法分析器的实现方式：
//    把词法分析器设计成一个独立子程序，以便于语法分析器调用。词法分析器运行一次产生一个单词符号。
//5、词法分析器的输出形式
//   （种别，属性值）
//其中：种别在“2、单词的种别”中进行了定义；
//      属性值：若单词种别只代表唯一单词，属性值为空；
//              若单词种别是SYM_IDENTIFIER，属性值为该单词在标识符表中的位置；
//              若单词种别是SYM_ NUMBER，属性值为该单词在常数表中的位置。
**/
</code></pre><a id="more"></a>
<pre><code>package foc;

import java.util.Scanner;

public class cffxq {
    char ch;
    StringBuffer strToken;
    static int flag_getchar = 0; //搜索指示器
    String str;   //字符串
    String[] gjz = {&quot;odd&quot;,&quot;begin&quot;, &quot;end&quot; ,&quot;if&quot; ,&quot;then&quot;, &quot;while&quot;, &quot;do&quot;, &quot;const&quot;, &quot;var&quot;,&quot;call&quot;,&quot;procedure&quot;};
    String[][] chart_id = new String[100][2];
    int flag_id = 0; //标识符指针
    String[] chart_const = new String[100];
    int flag_const = 0; //常数指针

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        StringBuffer stb = new StringBuffer(sc.nextLine());
        stb.append(&quot; &quot;);
        String str = stb.toString();
        cffxq c = new cffxq();
        while(flag_getchar&lt;str.length()-1){
            c.begin(str);
        }

    }

    private void GetChar(){
        ch = str.charAt(flag_getchar);
        flag_getchar++;
    } 

    public void begin(String str) {
        this.str = str;

        int code,value;
        strToken = new StringBuffer(&quot;&quot;);
        GetChar();
        GetBC();
        if(IsLetter()){
            while(IsLetter()||IsDigit()){
                Concat();
                GetChar();
            }
            Retract();
            code = Reserve();
            if(code &lt; 0){
                value = InsertId(strToken.toString());
                System.out.println(&quot;($ID,&quot; + value +&quot;)&quot;);
                return;
            }
            else if(code == 0){
                System.out.println(&quot;(算符或界符,&quot; + &quot;odd&quot;+&quot;)&quot;); 
                return;
            }
            else{
                System.out.println(&quot;($&quot;+gjz[code]+&quot;,-)&quot; ); 
                return;
            }
        }

        else if(IsDigit()){
            while(IsDigit()){
                Concat();
                GetChar();
            }
            Retract();
            value = InsertConst(strToken.toString());
            System.out.println(&quot;($INT,&quot; + value +&quot;)&quot;);
            return;
        }

        else if(ch == &apos;+&apos;){
            System.out.println(&quot;($+,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;-&apos;){
            System.out.println(&quot;($-,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;*&apos;){
            System.out.println(&quot;($*,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;/&apos;){
            System.out.println(&quot;($/,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;=&apos;){
            System.out.println(&quot;($=,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;,&apos;){
            System.out.println(&quot;($,,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;.&apos;){
            System.out.println(&quot;($.,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;(&apos;){
            System.out.println(&quot;($(,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;)&apos;){
            System.out.println(&quot;($),&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;;&apos;){
            System.out.println(&quot;($;,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;:&apos;){
            GetChar();
            if(ch == &apos;=&apos;){
                System.out.println(&quot;($:=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($:,&quot; + &quot;-)&quot;);
        }
        else if(ch == &apos;&gt;&apos;){
            GetChar();
            if(ch == &apos;=&apos;){
                System.out.println(&quot;($&gt;=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($&gt;,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;&lt;&apos;){
            GetChar();
            if(ch == &apos;&gt;&apos;){
                System.out.println(&quot;($&lt;&gt;,&quot; + &quot;-)&quot;);
                return;
            }
            else if(ch == &apos;=&apos;){
                System.out.println(&quot;($&lt;=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($&lt;,&quot; + &quot;-)&quot;);
            return;
        }

    }

    private void GetBC(){
        if(ch==&apos; &apos;){
            GetChar();
            GetBC();
        }
    }

    private void Concat(){
        strToken.append(ch);
    }

    private boolean IsLetter(){
        if(Character.isLetter(ch))
            return true;
        else
            return false;
    } 

    private boolean IsDigit(){
        if(Character.isDigit(ch))
            return true;
        else
            return false;
    } 

    private int Reserve(){
        for(int i=0;i&lt;gjz.length; i++){
            if(gjz[i].equals(strToken.toString()))
                return i;
        }
        return -1;   //返回数组索引，否则返回-1
    }

    private void Retract(){
        flag_getchar--;
        ch = &apos; &apos;;
    }

    private int InsertId(String strToken){
        for(int i=0;i&lt;flag_id;i++){
            if(chart_id[i][0].equals(strToken))
                return i;
        }
        chart_id[flag_id][0] = strToken;
        flag_id++;
        return flag_id-1;
    }

    private int InsertConst(String strToken){
        for(int i=0;i&lt;flag_const;i++){
            if(chart_const[i].equals(strToken))
                return i;
        }
        chart_const[flag_const] = strToken;
        flag_const++;
        return flag_const-1;
    }
    private void ProcError(){
        System.out.println(&quot;词法错误！&quot;);
    }

}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编译原理实验课写的词法分析器，加深了对编程语言的理解，将课本上的伪代码实现完善了一遍，纯手打。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* 编译原理实验-词法分析器
 * 刘嘉琦-20160325
 * 1、PL/0语言的单词结构
//关键字(10个)：begin, end ,if ,then, while, do, const, var,call,procedure
//标识符：字母序列，最大长度10
//常数：整型常数
//算符和界符（17个）：+， -， *，/，odd，=，&amp;lt;&amp;gt;，&amp;lt;，&amp;gt;，&amp;lt;=，&amp;gt;=，:=，(，) ，, ，.，;
//2、单词的种别划分
//    标识符 作为一种
//    常数 作为一种
//    算符和界符每个单词作为一个单独种别
//3、PL/0的语言的词法分析器将要完成以下工作：
//（1）    跳过分隔符（如空格，回车，制表符）；
//（2）    识别诸如begin，end，if，while等保留字；
//（3）    识别非保留字的一般标识符。
//（4）    识别数字序列。
//（5）    识别:=，&amp;lt;=，&amp;gt;=之类的特殊符号。
//4、词法分析器的实现方式：
//    把词法分析器设计成一个独立子程序，以便于语法分析器调用。词法分析器运行一次产生一个单词符号。
//5、词法分析器的输出形式
//   （种别，属性值）
//其中：种别在“2、单词的种别”中进行了定义；
//      属性值：若单词种别只代表唯一单词，属性值为空；
//              若单词种别是SYM_IDENTIFIER，属性值为该单词在标识符表中的位置；
//              若单词种别是SYM_ NUMBER，属性值为该单词在常数表中的位置。
**/
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="code" scheme="http://mjackie.github.io/categories/code/"/>
    
    
      <category term="java" scheme="http://mjackie.github.io/tags/java/"/>
    
      <category term="编译原理" scheme="http://mjackie.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>词法分析器</title>
    <link href="http://mjackie.github.io/code/civv5kafq0013psu0grdjm4ge/"/>
    <id>http://mjackie.github.io/code/civv5kafq0013psu0grdjm4ge/</id>
    <published>2016-11-23T15:18:12.000Z</published>
    <updated>2016-11-23T15:21:04.123Z</updated>
    
    <content type="html"><![CDATA[<p>编译原理实验课写的词法分析器，加深了对编程语言的理解，将课本上的伪代码实现完善了一遍，纯手打。</p>
<pre><code>/* 编译原理实验-词法分析器
 * 刘嘉琦-20160325
 * 1、PL/0语言的单词结构
//关键字(10个)：begin, end ,if ,then, while, do, const, var,call,procedure
//标识符：字母序列，最大长度10
//常数：整型常数
//算符和界符（17个）：+， -， *，/，odd，=，&lt;&gt;，&lt;，&gt;，&lt;=，&gt;=，:=，(，) ，, ，.，;
//2、单词的种别划分
//    标识符 作为一种
//    常数 作为一种
//    算符和界符每个单词作为一个单独种别
//3、PL/0的语言的词法分析器将要完成以下工作：
//（1）    跳过分隔符（如空格，回车，制表符）；
//（2）    识别诸如begin，end，if，while等保留字；
//（3）    识别非保留字的一般标识符。
//（4）    识别数字序列。
//（5）    识别:=，&lt;=，&gt;=之类的特殊符号。
//4、词法分析器的实现方式：
//    把词法分析器设计成一个独立子程序，以便于语法分析器调用。词法分析器运行一次产生一个单词符号。
//5、词法分析器的输出形式
//   （种别，属性值）
//其中：种别在“2、单词的种别”中进行了定义；
//      属性值：若单词种别只代表唯一单词，属性值为空；
//              若单词种别是SYM_IDENTIFIER，属性值为该单词在标识符表中的位置；
//              若单词种别是SYM_ NUMBER，属性值为该单词在常数表中的位置。
**/
</code></pre><a id="more"></a>
<pre><code>package foc;

import java.util.Scanner;

public class cffxq {
    char ch;
    StringBuffer strToken;
    static int flag_getchar = 0; //搜索指示器
    String str;   //字符串
    String[] gjz = {&quot;odd&quot;,&quot;begin&quot;, &quot;end&quot; ,&quot;if&quot; ,&quot;then&quot;, &quot;while&quot;, &quot;do&quot;, &quot;const&quot;, &quot;var&quot;,&quot;call&quot;,&quot;procedure&quot;};
    String[][] chart_id = new String[100][2];
    int flag_id = 0; //标识符指针
    String[] chart_const = new String[100];
    int flag_const = 0; //常数指针

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        StringBuffer stb = new StringBuffer(sc.nextLine());
        stb.append(&quot; &quot;);
        String str = stb.toString();
        cffxq c = new cffxq();
        while(flag_getchar&lt;str.length()-1){
            c.begin(str);
        }

    }

    private void GetChar(){
        ch = str.charAt(flag_getchar);
        flag_getchar++;
    } 

    public void begin(String str) {
        this.str = str;

        int code,value;
        strToken = new StringBuffer(&quot;&quot;);
        GetChar();
        GetBC();
        if(IsLetter()){
            while(IsLetter()||IsDigit()){
                Concat();
                GetChar();
            }
            Retract();
            code = Reserve();
            if(code &lt; 0){
                value = InsertId(strToken.toString());
                System.out.println(&quot;($ID,&quot; + value +&quot;)&quot;);
                return;
            }
            else if(code == 0){
                System.out.println(&quot;(算符或界符,&quot; + &quot;odd&quot;+&quot;)&quot;); 
                return;
            }
            else{
                System.out.println(&quot;($&quot;+gjz[code]+&quot;,-)&quot; ); 
                return;
            }
        }

        else if(IsDigit()){
            while(IsDigit()){
                Concat();
                GetChar();
            }
            Retract();
            value = InsertConst(strToken.toString());
            System.out.println(&quot;($INT,&quot; + value +&quot;)&quot;);
            return;
        }

        else if(ch == &apos;+&apos;){
            System.out.println(&quot;($+,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;-&apos;){
            System.out.println(&quot;($-,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;*&apos;){
            System.out.println(&quot;($*,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;/&apos;){
            System.out.println(&quot;($/,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;=&apos;){
            System.out.println(&quot;($=,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;,&apos;){
            System.out.println(&quot;($,,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;.&apos;){
            System.out.println(&quot;($.,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;(&apos;){
            System.out.println(&quot;($(,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;)&apos;){
            System.out.println(&quot;($),&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;;&apos;){
            System.out.println(&quot;($;,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;:&apos;){
            GetChar();
            if(ch == &apos;=&apos;){
                System.out.println(&quot;($:=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($:,&quot; + &quot;-)&quot;);
        }
        else if(ch == &apos;&gt;&apos;){
            GetChar();
            if(ch == &apos;=&apos;){
                System.out.println(&quot;($&gt;=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($&gt;,&quot; + &quot;-)&quot;);
            return;
        }
        else if(ch == &apos;&lt;&apos;){
            GetChar();
            if(ch == &apos;&gt;&apos;){
                System.out.println(&quot;($&lt;&gt;,&quot; + &quot;-)&quot;);
                return;
            }
            else if(ch == &apos;=&apos;){
                System.out.println(&quot;($&lt;=,&quot; + &quot;-)&quot;);
                return;
            }
            Retract();
            System.out.println(&quot;($&lt;,&quot; + &quot;-)&quot;);
            return;
        }

    }

    private void GetBC(){
        if(ch==&apos; &apos;){
            GetChar();
            GetBC();
        }
    }

    private void Concat(){
        strToken.append(ch);
    }

    private boolean IsLetter(){
        if(Character.isLetter(ch))
            return true;
        else
            return false;
    } 

    private boolean IsDigit(){
        if(Character.isDigit(ch))
            return true;
        else
            return false;
    } 

    private int Reserve(){
        for(int i=0;i&lt;gjz.length; i++){
            if(gjz[i].equals(strToken.toString()))
                return i;
        }
        return -1;   //返回数组索引，否则返回-1
    }

    private void Retract(){
        flag_getchar--;
        ch = &apos; &apos;;
    }

    private int InsertId(String strToken){
        for(int i=0;i&lt;flag_id;i++){
            if(chart_id[i][0].equals(strToken))
                return i;
        }
        chart_id[flag_id][0] = strToken;
        flag_id++;
        return flag_id-1;
    }

    private int InsertConst(String strToken){
        for(int i=0;i&lt;flag_const;i++){
            if(chart_const[i].equals(strToken))
                return i;
        }
        chart_const[flag_const] = strToken;
        flag_const++;
        return flag_const-1;
    }
    private void ProcError(){
        System.out.println(&quot;词法错误！&quot;);
    }

}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编译原理实验课写的词法分析器，加深了对编程语言的理解，将课本上的伪代码实现完善了一遍，纯手打。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* 编译原理实验-词法分析器
 * 刘嘉琦-20160325
 * 1、PL/0语言的单词结构
//关键字(10个)：begin, end ,if ,then, while, do, const, var,call,procedure
//标识符：字母序列，最大长度10
//常数：整型常数
//算符和界符（17个）：+， -， *，/，odd，=，&amp;lt;&amp;gt;，&amp;lt;，&amp;gt;，&amp;lt;=，&amp;gt;=，:=，(，) ，, ，.，;
//2、单词的种别划分
//    标识符 作为一种
//    常数 作为一种
//    算符和界符每个单词作为一个单独种别
//3、PL/0的语言的词法分析器将要完成以下工作：
//（1）    跳过分隔符（如空格，回车，制表符）；
//（2）    识别诸如begin，end，if，while等保留字；
//（3）    识别非保留字的一般标识符。
//（4）    识别数字序列。
//（5）    识别:=，&amp;lt;=，&amp;gt;=之类的特殊符号。
//4、词法分析器的实现方式：
//    把词法分析器设计成一个独立子程序，以便于语法分析器调用。词法分析器运行一次产生一个单词符号。
//5、词法分析器的输出形式
//   （种别，属性值）
//其中：种别在“2、单词的种别”中进行了定义；
//      属性值：若单词种别只代表唯一单词，属性值为空；
//              若单词种别是SYM_IDENTIFIER，属性值为该单词在标识符表中的位置；
//              若单词种别是SYM_ NUMBER，属性值为该单词在常数表中的位置。
**/
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="code" scheme="http://mjackie.github.io/categories/code/"/>
    
    
      <category term="java" scheme="http://mjackie.github.io/tags/java/"/>
    
      <category term="编译原理" scheme="http://mjackie.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
